@page "/chat-history"
@using ChatPDF.Web.Services
@using ChatPDF.Web.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject ChatHistoryService ChatHistoryService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Chat History - ChatPDF</PageTitle>

<div class="max-w-6xl mx-auto px-4" style="padding-top: 32px;">
    <!-- Header -->
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 24px; padding: 40px; margin-bottom: 32px; box-shadow: 0 20px 40px rgba(102, 126, 234, 0.15);">
        <div style="display: flex; justify-content: space-between; align-items: flex-start; flex-wrap: wrap; gap: 24px;">
            <div>
                <h1 style="font-size: 36px; font-weight: 800; color: white; margin-bottom: 8px; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">Chat History</h1>
                <p style="color: rgba(255, 255, 255, 0.9); font-size: 18px; line-height: 1.6;">Manage your previous conversations and continue where you left off</p>
            </div>
            <div style="display: flex; gap: 16px; align-items: center;">
                @if (selectedSessions.Any())
                {
                    <button style="display: flex; align-items: center; gap: 8px; padding: 12px 20px; background: rgba(239, 68, 68, 0.9); color: white; border: none; border-radius: 12px; font-weight: 600; box-shadow: 0 4px 12px rgba(239, 68, 68, 0.25); transition: all 0.2s ease; cursor: pointer; backdrop-filter: blur(10px);" @onclick="DeleteSelectedSessions">
                        <svg style="width: 18px; height: 18px;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Delete Selected (@selectedSessions.Count)
                    </button>
                }
                <a href="/?new=true" style="display: flex; align-items: center; gap: 8px; padding: 12px 20px; background: rgba(255, 255, 255, 0.95); color: #667eea; border: none; border-radius: 12px; font-weight: 600; box-shadow: 0 4px 12px rgba(255, 255, 255, 0.25); transition: all 0.2s ease; cursor: pointer; backdrop-filter: blur(10px); text-decoration: none;">
                    <svg style="width: 18px; height: 18px;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    New Chat
                </a>
            </div>
        </div>
    </div>

    <!-- Search and Filters -->
    <div style="background: white; border-radius: 20px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08); border: 1px solid rgba(255, 255, 255, 0.2); padding: 24px; margin-bottom: 24px; backdrop-filter: blur(10px);">
        <div style="display: flex; gap: 20px; align-items: center;">
            <div style="flex: 1; position: relative;">
                <svg style="position: absolute; left: 16px; top: 50%; transform: translateY(-50%); width: 20px; height: 20px; color: #9ca3af;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                <input type="text" 
                       placeholder="Search chat history..." 
                       style="width: 100%; padding: 16px 16px 16px 48px; border: 2px solid #e5e7eb; border-radius: 12px; font-size: 16px; background: #f9fafb; transition: all 0.2s ease; outline: none;"
                       @bind="searchQuery" 
                       @oninput="OnSearchInput"
                       onfocus="this.style.borderColor='#667eea'; this.style.background='white';"
                       onblur="this.style.borderColor='#e5e7eb'; this.style.background='#f9fafb';" />
            </div>
            <div style="display: flex; gap: 12px; align-items: center;">
                <select style="padding: 16px 20px; border: 2px solid #e5e7eb; border-radius: 12px; font-size: 16px; background: white; min-width: 160px; cursor: pointer; outline: none; transition: all 0.2s ease;" @bind="sortBy" @bind:after="ApplyFiltersAndSort">
                    <option value="recent">Most Recent</option>
                    <option value="oldest">Oldest First</option>
                    <option value="title">By Title</option>
                </select>
                <button style="display: flex; align-items: center; gap: 8px; padding: 16px 20px; background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%); border: 2px solid #e5e7eb; border-radius: 12px; color: #374151; font-size: 16px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; outline: none;" @onclick="RefreshSessions">
                    <svg style="width: 18px; height: 18px;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Refresh
                </button>
            </div>
        </div>
    </div>

    <!-- Chat Sessions -->
    <div style="background: white; border-radius: 20px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08); border: 1px solid rgba(255, 255, 255, 0.2); overflow: hidden; backdrop-filter: blur(10px);">
        @if (isLoading)
        {
            <div style="display: flex; align-items: center; justify-content: center; padding: 48px;">
                <div style="display: flex; align-items: center; gap: 16px;">
                    <svg style="width: 32px; height: 32px; color: #667eea; animation: spin 1s linear infinite;" fill="none" viewBox="0 0 24 24">
                        <circle style="opacity: 0.25;" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path style="opacity: 0.75;" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span style="color: #6b7280; font-size: 18px; font-weight: 500;">Loading chat history...</span>
                </div>
            </div>
        }
        else if (!filteredSessions.Any())
        {
            <div style="text-align: center; padding: 48px 32px;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 24px; width: 80px; height: 80px; display: flex; align-items: center; justify-content: center; margin: 0 auto 24px;">
                    <svg style="width: 40px; height: 40px; color: white;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                </div>
                <h3 style="font-size: 24px; font-weight: 700; color: #111827; margin-bottom: 12px;">No chat history found</h3>
                <p style="color: #6b7280; font-size: 16px; margin-bottom: 32px; line-height: 1.6;">
                    @if (string.IsNullOrEmpty(searchQuery))
                    {
                        <text>Start your first conversation to see chat history here.</text>
                    }
                    else
                    {
                        <text>No chats match your search criteria. Try adjusting your search terms.</text>
                    }
                </p>
                @if (string.IsNullOrEmpty(searchQuery))
                {
                    <a href="/?new=true" style="display: inline-flex; align-items: center; gap: 8px; padding: 16px 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 12px; font-weight: 600; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.25); transition: all 0.2s ease; text-decoration: none;">
                        <svg style="width: 20px; height: 20px;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        Start Your First Chat
                    </a>
                }
            </div>
        }
        else
        {
            <!-- Chat Sessions Grid -->
            <div style="padding: 24px;">
                <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 20px;">
                    @foreach (var session in filteredSessions)
                    {
                        <div style="@(selectedSessions.Contains(session.Id) ? "background: linear-gradient(135deg, #eff6ff 0%, #e0f2fe 100%); border: 2px solid #2563eb;" : "background: white; border: 2px solid #f1f5f9;") border-radius: 16px; padding: 20px; transition: all 0.2s ease; cursor: pointer; position: relative;" 
                             onmouseover="@(selectedSessions.Contains(session.Id) ? "" : "this.style.borderColor='#e2e8f0'; this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 25px rgba(0, 0, 0, 0.1)'")" 
                             onmouseout="@(selectedSessions.Contains(session.Id) ? "" : "this.style.borderColor='#f1f5f9'; this.style.transform='translateY(0)'; this.style.boxShadow='none'")">
                            
                            <!-- Selection Checkbox -->
                            <div style="position: absolute; top: 12px; right: 12px;">
                                <input type="checkbox" 
                                       style="width: 18px; height: 18px; accent-color: #667eea; cursor: pointer;"
                                       @onchange="(e) => ToggleSessionSelection(session.Id, (bool)e.Value!)" 
                                       checked="@selectedSessions.Contains(session.Id)" />
                            </div>

                            <!-- Session Content -->
                            <div @onclick="() => ContinueChat(session.Id)">
                                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 12px; padding-right: 30px;">
                                    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; width: 48px; height: 48px; display: flex; align-items: center; justify-content: center; flex-shrink: 0;">
                                        <svg style="width: 24px; height: 24px; color: white;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                        </svg>
                                    </div>
                                    <div style="flex: 1; min-width: 0;">
                                        <h4 style="font-size: 16px; font-weight: 600; color: #111827; margin: 0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@session.Title</h4>
                                        <div style="display: flex; align-items: center; gap: 8px; margin-top: 4px;">
                                            <span style="color: #6b7280; font-size: 12px;">@GetMessageCount(session) messages</span>
                                            <span style="color: #d1d5db;">•</span>
                                            <span style="color: #6b7280; font-size: 12px;">@GetRelativeTime(session.UpdatedAt)</span>
                                        </div>
                                    </div>
                                </div>
                                
                                @if (session.Messages.Any())
                                {
                                    var lastMessage = session.Messages.LastOrDefault(m => m.Role == Microsoft.Extensions.AI.ChatRole.User || m.Role == Microsoft.Extensions.AI.ChatRole.Assistant);
                                    if (lastMessage != null)
                                    {
                                        <p style="color: #6b7280; font-size: 14px; line-height: 1.4; margin: 0; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                                            <strong>@(lastMessage.Role == Microsoft.Extensions.AI.ChatRole.User ? "You" : "AI"):</strong> @(lastMessage.Text ?? "")
                                        </p>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<ChatSession> sessions = new();
    private List<ChatSession> filteredSessions = new();
    private HashSet<Guid> selectedSessions = new();
    private bool isLoading = true;
    private string searchQuery = "";
    private string sortBy = "recent";

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Clean up empty sessions first
            await ChatHistoryService.CleanupEmptySessionsAsync();
            
            sessions = await ChatHistoryService.GetUserChatSessionsAsync();
            ApplyFiltersAndSort();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFiltersAndSort()
    {
        var query = sessions.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchQuery))
        {
            query = query.Where(s => 
                s.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                s.Messages.Any(m => m.Text?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true));
        }

        // Apply sorting
        query = sortBy switch
        {
            "oldest" => query.OrderBy(s => s.CreatedAt),
            "title" => query.OrderBy(s => s.Title),
            _ => query.OrderByDescending(s => s.UpdatedAt)
        };

        filteredSessions = query.ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        ApplyFiltersAndSort();
        StateHasChanged();
    }

    private async Task RefreshSessions()
    {
        selectedSessions.Clear();
        await LoadSessions();
    }

    private void ToggleSessionSelection(Guid sessionId, bool selected)
    {
        if (selected)
            selectedSessions.Add(sessionId);
        else
            selectedSessions.Remove(sessionId);
        
        StateHasChanged();
    }

    private async Task DeleteSelectedSessions()
    {
        if (!selectedSessions.Any()) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete {selectedSessions.Count} selected chat session(s)? This action cannot be undone.");
        
        if (confirmed)
        {
            foreach (var sessionId in selectedSessions.ToList())
            {
                await ChatHistoryService.DeleteChatSessionAsync(sessionId);
            }
            
            selectedSessions.Clear();
            await LoadSessions();
        }
    }

    private void ContinueChat(Guid sessionId)
    {
        Navigation.NavigateTo($"/?session={sessionId}");
    }

    private int GetMessageCount(ChatSession session)
    {
        return session.Messages.Count(m => m.Role == Microsoft.Extensions.AI.ChatRole.User || m.Role == Microsoft.Extensions.AI.ChatRole.Assistant);
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;
        
        if (timeSpan.TotalDays > 1)
            return $"{(int)timeSpan.TotalDays} days ago";
        if (timeSpan.TotalHours > 1)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalMinutes > 1)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        
        return "Just now";
    }
}