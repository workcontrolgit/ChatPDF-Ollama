@page "/diagnostics"
@using ChatPDF.Web.Services
@using ChatPDF.Web.Services.Ingestion
@using Microsoft.Extensions.AI
@inject SemanticSearch Search
@inject DocumentService DocumentService
@inject IEmbeddingGenerator<string, Embedding<float>> EmbeddingGenerator
@inject IChatClient ChatClient
@inject ChatHistoryService ChatHistoryService

<PageTitle>Diagnostics - ChatPDF</PageTitle>

<div class="max-w-4xl mx-auto px-4" style="padding-top: 32px;">
    <div style="background: white; border-radius: 20px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08); padding: 32px; margin-bottom: 24px;">
        <h1 style="font-size: 28px; font-weight: 700; color: #1e293b; margin-bottom: 24px;">System Diagnostics</h1>
        
        <div style="display: flex; flex-direction: column; gap: 24px;">
            
            <!-- Test Buttons -->
            <div style="display: flex; gap: 16px; flex-wrap: wrap;">
                <button style="padding: 12px 20px; background: #667eea; color: white; border: none; border-radius: 8px; cursor: pointer;" @onclick="TestDocuments">
                    Test Documents
                </button>
                <button style="padding: 12px 20px; background: #667eea; color: white; border: none; border-radius: 8px; cursor: pointer;" @onclick="TestEmbeddings">
                    Test Embeddings
                </button>
                <button style="padding: 12px 20px; background: #667eea; color: white; border: none; border-radius: 8px; cursor: pointer;" @onclick="TestSearch">
                    Test Search
                </button>
                <button style="padding: 12px 20px; background: #667eea; color: white; border: none; border-radius: 8px; cursor: pointer;" @onclick="TestChat">
                    Test Chat
                </button>
                <button style="padding: 12px 20px; background: #dc2626; color: white; border: none; border-radius: 8px; cursor: pointer;" @onclick="TestUserIsolation">
                    Test User Isolation
                </button>
            </div>

            <!-- Results Area -->
            <div style="background: #f8fafc; border-radius: 12px; padding: 20px; min-height: 200px;">
                <h3 style="margin-bottom: 16px; color: #374151;">Results:</h3>
                <pre style="white-space: pre-wrap; font-family: monospace; color: #4b5563;">@diagnosticResults</pre>
            </div>
        </div>
    </div>
</div>

@code {
    private string diagnosticResults = "Click a test button to run diagnostics...";

    private void TestDocuments()
    {
        try
        {
            diagnosticResults = "Testing document availability...\n\n";
            var documents = DocumentService.GetAvailableDocuments();
            diagnosticResults += $"‚úÖ Found {documents.Count} documents:\n";
            foreach (var doc in documents)
            {
                diagnosticResults += $"  - {doc}\n";
            }
            
            if (documents.Count == 0)
            {
                diagnosticResults += "\n‚ùå No documents found! Make sure PDFs are in wwwroot/Data/ folder.";
            }
        }
        catch (Exception ex)
        {
            diagnosticResults = $"‚ùå Document test failed: {ex.Message}";
        }
        StateHasChanged();
    }

    private async Task TestEmbeddings()
    {
        try
        {
            diagnosticResults = "Testing embedding generation...\n\n";
            var testText = "This is a test sentence for embedding generation.";
            var embeddings = await EmbeddingGenerator.GenerateAsync(testText);
            
            if (embeddings?.Vector.Length > 0)
            {
                diagnosticResults += $"‚úÖ Embedding generated successfully!\n";
                diagnosticResults += $"   Vector dimension: {embeddings.Vector.Length}\n";
                var vectorSpan = embeddings.Vector.Span;
                var first5 = vectorSpan.Slice(0, Math.Min(5, vectorSpan.Length));
                diagnosticResults += $"   First 5 values: [{string.Join(", ", first5.ToArray().Select(f => f.ToString("F4")))}...]\n";
            }
            else
            {
                diagnosticResults += "‚ùå Failed to generate embeddings - no vector returned.";
            }
        }
        catch (Exception ex)
        {
            diagnosticResults = $"‚ùå Embedding test failed: {ex.Message}\n\nThis usually means:\n- Ollama is not running (localhost:11434)\n- nomic-embed-text model is not installed";
        }
        StateHasChanged();
    }

    private async Task TestSearch()
    {
        try
        {
            diagnosticResults = "Testing semantic search...\n\n";
            var searchResults = await Search.SearchAsync("test document content", null, 3);
            
            diagnosticResults += $"‚úÖ Search completed!\n";
            diagnosticResults += $"   Found {searchResults.Count} results:\n\n";
            
            foreach (var result in searchResults)
            {
                diagnosticResults += $"üìÑ Document: {result.DocumentId}\n";
                diagnosticResults += $"   Page: {result.PageNumber}\n";
                diagnosticResults += $"   Text: {result.Text.Substring(0, Math.Min(100, result.Text.Length))}...\n\n";
            }
            
            if (searchResults.Count == 0)
            {
                diagnosticResults += "‚ùå No search results found. This could mean:\n";
                diagnosticResults += "- Vector database (Qdrant) is not running\n";
                diagnosticResults += "- Documents haven't been ingested/embedded\n";
                diagnosticResults += "- Search terms don't match any content";
            }
        }
        catch (Exception ex)
        {
            diagnosticResults = $"‚ùå Search test failed: {ex.Message}\n\nThis usually means:\n- Qdrant vector database is not running (localhost:6333)\n- Collections haven't been created";
        }
        StateHasChanged();
    }

    private async Task TestChat()
    {
        try
        {
            diagnosticResults = "Testing chat client...\n\n";
            var testMessage = new ChatMessage(ChatRole.User, "Hello, can you respond to this test message?");
            var messages = new List<ChatMessage> { testMessage };
            
            var response = await ChatClient.GetResponseAsync(messages);
            
            diagnosticResults += $"‚úÖ Chat client working!\n";
            diagnosticResults += $"   Response: {response?.ToString() ?? "No response"}\n";
        }
        catch (Exception ex)
        {
            diagnosticResults = $"‚ùå Chat test failed: {ex.Message}\n\nThis usually means:\n- Ollama is not running (localhost:11434)\n- llama3.2 model is not installed";
        }
        StateHasChanged();
    }

    private async Task TestUserIsolation()
    {
        try
        {
            diagnosticResults = "Testing user isolation and authentication...\n\n";
            
            // Test current user ID
            var currentUserId = await ChatHistoryService.GetCurrentUserIdAsync();
            diagnosticResults += $"‚úÖ Current User ID: {currentUserId}\n\n";
            
            // Test user claims
            var claims = await ChatHistoryService.GetUserClaimsAsync();
            if (claims.Any())
            {
                diagnosticResults += "üìã User Claims:\n";
                foreach (var claim in claims)
                {
                    diagnosticResults += $"   {claim.Key}: {claim.Value}\n";
                }
                diagnosticResults += "\n";
            }
            else
            {
                diagnosticResults += "‚ö†Ô∏è  No user claims found - user is not authenticated\n\n";
            }
            
            // Test chat sessions
            var sessions = await ChatHistoryService.GetUserChatSessionsAsync();
            diagnosticResults += $"üìÅ Chat Sessions for current user: {sessions.Count}\n";
            
            foreach (var session in sessions.Take(3))
            {
                diagnosticResults += $"   - {session.Title} (User: {session.UserId}, Messages: {session.Messages.Count})\n";
            }
            
            if (sessions.Count > 3)
            {
                diagnosticResults += $"   ... and {sessions.Count - 3} more sessions\n";
            }
            
            // Validate user isolation
            if (currentUserId == "anonymous")
            {
                diagnosticResults += "\n‚ö†Ô∏è  WARNING: User is identified as 'anonymous'\n";
                diagnosticResults += "   This means chat history will not be properly isolated between users!\n";
                diagnosticResults += "   Check your authentication configuration.\n";
            }
            else
            {
                diagnosticResults += $"\n‚úÖ User properly identified: {currentUserId}\n";
                diagnosticResults += "   Chat history should be properly isolated.\n";
            }
        }
        catch (Exception ex)
        {
            diagnosticResults = $"‚ùå User isolation test failed: {ex.Message}";
        }
        StateHasChanged();
    }
}