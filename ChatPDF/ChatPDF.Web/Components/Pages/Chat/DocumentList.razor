@using ChatPDF.Web.Services
@inject DocumentService DocumentService
@inject IJSRuntime JS

<div class="document-list">
    <h3>Available Documents</h3>
    @if (documents.Any())
    {
        <div class="document-items">
            @foreach (var document in documents)
            {
                <div class="document-item">
                    <div class="document-info">
                        <ChatCitation File="@document" />
                    </div>
                    <button class="btn-delete" @onclick="() => ConfirmDeleteAsync(document)" title="Delete document">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="delete-icon">
                            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                        </svg>
                    </button>
                </div>
            }
        </div>
    }
    else
    {
        <p class="no-documents">No documents available. Upload a PDF to get started.</p>
    }
    
    @if (isDeleting)
    {
        <div class="delete-status">
            <svg class="delete-spinner" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Deleting...
        </div>
    }
    else if (!string.IsNullOrEmpty(deleteMessage))
    {
        <div class="delete-status @(deleteSuccess ? "success" : "error")">
            @deleteMessage
        </div>
    }
</div>

<style>
    .document-list {
        margin: 1rem 0;
    }

    .document-list h3 {
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
        color: var(--neutral-700);
    }

    .document-items {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .document-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.5rem;
        border: 1px solid var(--neutral-200);
        border-radius: 0.375rem;
        background: var(--neutral-50);
    }

    .document-info {
        flex: 1;
    }

    .btn-delete {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2rem;
        height: 2rem;
        padding: 0;
        border: none;
        border-radius: 0.25rem;
        background: transparent;
        color: var(--red-600);
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-delete:hover {
        background: var(--red-50);
        color: var(--red-700);
    }

    .delete-icon {
        width: 1.25rem;
        height: 1.25rem;
    }

    .no-documents {
        color: var(--neutral-500);
        font-style: italic;
        margin: 1rem 0;
    }

    .delete-status {
        margin-top: 0.5rem;
        padding: 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .delete-status.success {
        background: var(--green-50);
        color: var(--green-700);
        border: 1px solid var(--green-200);
    }

    .delete-status.error {
        background: var(--red-50);
        color: var(--red-700);
        border: 1px solid var(--red-200);
    }

    .delete-spinner {
        width: 1rem;
        height: 1rem;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
</style>

@code {
    [Parameter] public List<string> Documents { get; set; } = new();
    [Parameter] public EventCallback OnDocumentDeleted { get; set; }

    private List<string> documents = new();
    private bool isDeleting = false;
    private string deleteMessage = "";
    private bool deleteSuccess = false;

    protected override void OnParametersSet()
    {
        documents = Documents ?? new();
    }

    private async Task ConfirmDeleteAsync(string fileName)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{fileName}'? This action cannot be undone.");
        
        if (confirmed)
        {
            await DeleteDocumentAsync(fileName);
        }
    }

    private async Task DeleteDocumentAsync(string fileName)
    {
        isDeleting = true;
        deleteMessage = "";
        StateHasChanged();

        try
        {
            var success = await DocumentService.DeleteDocumentAsync(fileName);
            
            if (success)
            {
                ShowMessage($"'{fileName}' deleted successfully!", true);
                await OnDocumentDeleted.InvokeAsync();
            }
            else
            {
                ShowMessage($"Failed to delete '{fileName}'. Please try again.", false);
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error deleting '{fileName}': {ex.Message}", false);
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }

    private void ShowMessage(string message, bool success)
    {
        deleteMessage = message;
        deleteSuccess = success;
        StateHasChanged();

        // Clear message after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                deleteMessage = "";
                StateHasChanged();
            });
        });
    }
}