@page "/"
@using System.ComponentModel
@using Microsoft.Extensions.Options
@using ChatPDF.Web.Configuration
@using ChatPDF.Web.Models
@using ChatPDF.Web.Services.Ingestion
@using Microsoft.AspNetCore.WebUtilities
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject SemanticSearch Search
@inject IWebHostEnvironment Environment
@inject IOptions<ApplicationConfiguration> AppConfig
@inject DocumentService DocumentService
@inject ChatHistoryService ChatHistoryService
@inject DataIngestor DataIngestor
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Chat - ChatPDF</PageTitle>

<div class="max-w-5xl mx-auto px-4" style="padding-top: 32px;">
    <!-- Main Chat Area -->
    <div style="background: white; border-radius: 20px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); min-height: 700px; display: flex; flex-direction: column; backdrop-filter: blur(10px);">
        <ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
            <NoMessagesContent>
                <div style="flex: 1; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 48px 32px; text-align: center;">
                    @if (availableDocuments.Any())
                    {
                        <div style="max-width: 600px; display: flex; flex-direction: column; gap: 32px;">
                            <div style="text-align: center;">
                                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 24px; width: 80px; height: 80px; display: flex; align-items: center; justify-content: center; margin: 0 auto 24px;">
                                    <svg style="width: 40px; height: 40px; color: white;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                    </svg>
                                </div>
                                <h2 style="font-size: 32px; font-weight: 700; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; margin-bottom: 16px;">Ready to chat!</h2>
                                <p style="color: #6b7280; font-size: 18px; line-height: 1.6; margin-bottom: 24px;">
                                    You have <span style="font-weight: 600; color: #667eea;">@availableDocuments.Count</span> document@(availableDocuments.Count == 1 ? "" : "s") ready. 
                                    Ask me anything about your PDFs and I'll help you find the answers.
                                </p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div style="max-width: 500px; display: flex; flex-direction: column; gap: 32px;">
                            <div style="text-align: center;">
                                <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); border-radius: 24px; width: 80px; height: 80px; display: flex; align-items: center; justify-content: center; margin: 0 auto 24px;">
                                    <svg style="width: 40px; height: 40px; color: white;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                    </svg>
                                </div>
                                <h2 style="font-size: 32px; font-weight: 700; background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; margin-bottom: 16px;">Welcome to ChatPDF</h2>
                                <p style="color: #6b7280; font-size: 18px; line-height: 1.6; margin-bottom: 32px;">Upload PDF documents and start having intelligent conversations with your files using AI.</p>
                                <a href="/documents" style="display: inline-flex; align-items: center; gap: 8px; padding: 16px 24px; background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; text-decoration: none; border-radius: 12px; font-weight: 600; box-shadow: 0 4px 12px rgba(240, 147, 251, 0.25); transition: all 0.2s ease;">
                                    <svg style="width: 20px; height: 20px;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                    Upload Your First Document
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </NoMessagesContent>
        </ChatMessageList>

        <!-- Chat Input Area -->
        <div style="border-top: 1px solid #e5e7eb; padding: 24px; display: flex; flex-direction: column; gap: 16px; background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); border-radius: 0 0 20px 20px;">
            <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
            <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
            
            <!-- Action Buttons -->
            <div style="display: flex; justify-content: center; gap: 16px; margin-top: 8px;">
                <label style="display: flex; align-items: center; gap: 8px; padding: 10px 20px; background: linear-gradient(135deg, #10b981 0%, #059669 100%); color: white; border-radius: 10px; font-weight: 500; font-size: 14px; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(16, 185, 129, 0.25);"
                       onmouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 12px rgba(16, 185, 129, 0.35)';"
                       onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(16, 185, 129, 0.25)';">
                    <svg style="width: 16px; height: 16px;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    Upload Document
                    <InputFile OnChange="OnFileSelected" accept=".pdf" style="display: none;" />
                </label>
                
                <button @onclick="ShowNewChatOptions"
                        style="display: flex; align-items: center; gap: 8px; padding: 10px 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 10px; font-weight: 500; font-size: 14px; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(102, 126, 234, 0.25);"
                        onmouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 12px rgba(102, 126, 234, 0.35)';"
                        onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(102, 126, 234, 0.25)';">
                    <svg style="width: 16px; height: 16px;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    New Chat
                </button>
            </div>
        </div>
    </div>

    <!-- Upload Progress Indicator -->
    @if (isUploading)
    {
        <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000; background: white; border-radius: 16px; padding: 32px; box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15); border: 1px solid rgba(255, 255, 255, 0.2); backdrop-filter: blur(10px);">
            <div style="display: flex; align-items: center; gap: 16px;">
                <svg style="width: 32px; height: 32px; color: #667eea; animation: spin 1s linear infinite;" fill="none" viewBox="0 0 24 24">
                    <circle style="opacity: 0.25;" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path style="opacity: 0.75;" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <div>
                    <div style="font-weight: 600; color: #1e293b; font-size: 18px; margin-bottom: 4px;">Uploading Document</div>
                    <div style="color: #64748b; font-size: 14px;">Processing and indexing your PDF...</div>
                </div>
            </div>
        </div>
        <div style="position: fixed; inset: 0; background: rgba(0, 0, 0, 0.3); z-index: 999; backdrop-filter: blur(2px);"></div>
    }

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div style="position: fixed; bottom: 24px; right: 24px; z-index: 1100; animation: slideUp 0.3s ease-out;">
            <div style="display: flex; align-items: center; gap: 12px; padding: 16px 20px; border-radius: 12px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12); backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.2); @(statusSuccess ? "background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%); border-color: #86efac;" : "background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%); border-color: #fca5a5;")">
                @if (statusSuccess)
                {
                    <div style="background: #059669; border-radius: 50%; padding: 4px; display: flex; align-items: center; justify-content: center;">
                        <svg style="width: 16px; height: 16px; color: white;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
                        </svg>
                    </div>
                    <span style="color: #065f46; font-weight: 600; font-size: 14px;">@statusMessage</span>
                }
                else
                {
                    <div style="background: #dc2626; border-radius: 50%; padding: 4px; display: flex; align-items: center; justify-content: center;">
                        <svg style="width: 16px; height: 16px; color: white;" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <span style="color: #991b1b; font-weight: 600; font-size: 14px;">@statusMessage</span>
                }
            </div>
        </div>
    }
</div>

@code {
    private const string SystemPrompt = @"
        You are an assistant who answers questions about information you retrieve.
        Do not answer questions about anything else.
        Use only simple markdown to format your responses.

        Use the search tool to find relevant information. When you do this, end your
        reply with citations in the special XML format:

        <citation filename='string' page_number='number'>exact quote here</citation>

        Always include the citation in your response if there are results.

        The quote must be max 5 words, taken word-for-word from the search result, and is the basis for why the citation is relevant.
        Don't refer to the presence of citations; just emit these tags right at the end, with no surrounding text.
        ";

    private readonly ChatOptions chatOptions = new();
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;
    private List<string> availableDocuments = new();
    private ChatSession? currentSession;
    private Guid? sessionIdFromUrl;
    
    // Upload related variables
    private bool isUploading = false;
    private string statusMessage = "";
    private bool statusSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync)];
        LoadAvailableDocuments();

        // Check if we're loading an existing session from URL
        var uri = new Uri(Nav.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        
        if (query.TryGetValue("session", out var sessionIdStr) && Guid.TryParse(sessionIdStr, out var sessionId))
        {
            sessionIdFromUrl = sessionId;
            await LoadChatSession(sessionId);
        }
        else if (query.TryGetValue("new", out _))
        {
            // Explicit new session requested - don't load any existing session
            currentSession = null;
        }
        else
        {
            // Try to load the most recent session to persist across navigation
            await LoadMostRecentSession();
        }
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Create session on first message if it doesn't exist
        if (currentSession == null)
        {
            currentSession = await ChatHistoryService.CreateChatSessionAsync();
        }

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Save user message to history
        await ChatHistoryService.AddMessageToSessionAsync(currentSession.Id, userMessage);

        // Show loading indicator immediately
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, "");
        StateHasChanged();

        // Display a new response from the IChatClient, streaming responses
        // aren't supported because Ollama will not support both streaming and using Tools
        currentResponseCancellation = new();
        var response = await ChatClient.GetResponseAsync(messages, chatOptions, currentResponseCancellation.Token);

        // Clear loading indicator and store responses in the conversation
        currentResponseMessage = null;
        var messageCountBefore = messages.Count;
        messages.AddMessages(response);
        var messageCountAfter = messages.Count;
        
        // Save AI response to history - save the new messages that were added
        if (currentSession != null && messageCountAfter > messageCountBefore)
        {
            var newMessages = messages.Skip(messageCountBefore).ToList();
            await ChatHistoryService.AddMessagesToSessionAsync(currentSession.Id, newMessages);
        }
        
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        
        // Clear current session - new session will be created when user sends first message
        currentSession = null;
        Nav.NavigateTo("/", forceLoad: false);
        
        await chatInput!.FocusAsync();
    }

    private async Task LoadChatSession(Guid sessionId)
    {
        try
        {
            var session = await ChatHistoryService.GetChatSessionAsync(sessionId);
            if (session != null)
            {
                currentSession = session;
                messages.Clear();
                messages.Add(new(ChatRole.System, SystemPrompt));
                
                // Load all messages except system messages
                foreach (var msg in session.Messages.Where(m => m.Role != ChatRole.System))
                {
                    messages.Add(msg);
                }
                
                StateHasChanged();
            }
        }
        catch
        {
            // If loading fails, create a new session
            currentSession = await ChatHistoryService.CreateChatSessionAsync();
        }
    }

    private async Task LoadMostRecentSession()
    {
        try
        {
            var recentSession = await ChatHistoryService.GetMostRecentSessionAsync();
            if (recentSession != null)
            {
                currentSession = recentSession;
                messages.Clear();
                messages.Add(new(ChatRole.System, SystemPrompt));
                
                // Load all messages except system messages
                foreach (var msg in recentSession.Messages.Where(m => m.Role != ChatRole.System))
                {
                    messages.Add(msg);
                }
                
                // Update URL to reflect current session without triggering navigation
                var newUrl = $"/?session={recentSession.Id}";
                Nav.NavigateTo(newUrl, replace: true);
                
                StateHasChanged();
            }
        }
        catch
        {
            // If loading fails, stay in sessionless state until user sends first message
            currentSession = null;
        }
    }

    private void ShowNewChatOptions()
    {
        // This could be enhanced to show recent chats or templates in the future
        _ = ResetConversationAsync();
    }

    private void LoadAvailableDocuments()
    {
        availableDocuments = DocumentService.GetAvailableDocuments();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.DocumentId}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
            return;

        // Validate file type
        if (!file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
        {
            ShowStatusMessage("Only PDF files are allowed.", false);
            return;
        }

        // Validate file size using configuration
        var maxSizeBytes = AppConfig.Value.DataIngestion.MaxFileSizeMB * 1024 * 1024;
        if (file.Size > maxSizeBytes)
        {
            ShowStatusMessage($"File size must be less than {AppConfig.Value.DataIngestion.MaxFileSizeMB}MB.", false);
            return;
        }

        isUploading = true;
        StateHasChanged();

        try
        {
            // Create the Data directory if it doesn't exist (using configuration)
            var dataPath = Path.Combine(Environment.WebRootPath, AppConfig.Value.DataIngestion.PdfDirectory);
            Directory.CreateDirectory(dataPath);

            // Generate unique filename to avoid conflicts
            var fileName = Path.GetFileNameWithoutExtension(file.Name);
            var extension = Path.GetExtension(file.Name);
            var uniqueFileName = $"{fileName}_{DateTime.Now:yyyyMMdd_HHmmss}{extension}";
            var filePath = Path.Combine(dataPath, uniqueFileName);

            // Save the file (using configuration for max size)
            using (var stream = file.OpenReadStream(maxAllowedSize: maxSizeBytes))
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await stream.CopyToAsync(fileStream);
            }

            // Ingest the new document
            var source = new PDFDirectorySource(dataPath);
            await DataIngestor.IngestDataAsync(source);

            // Refresh available documents list
            LoadAvailableDocuments();

            ShowStatusMessage($"'{file.Name}' uploaded and indexed successfully!", true);
        }
        catch (Exception ex)
        {
            ShowStatusMessage($"Upload failed: {ex.Message}", false);
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private void ShowStatusMessage(string message, bool success)
    {
        statusMessage = message;
        statusSuccess = success;
        StateHasChanged();

        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                statusMessage = "";
                StateHasChanged();
            });
        });
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
