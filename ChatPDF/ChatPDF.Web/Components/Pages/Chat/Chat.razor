@page "/"
@using System.ComponentModel
@using Microsoft.Extensions.Options
@using ChatPDF.Web.Configuration
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject SemanticSearch Search
@inject IWebHostEnvironment Environment
@inject IOptions<ApplicationConfiguration> AppConfig
@inject DocumentService DocumentService
@implements IDisposable

<PageTitle>Chat - ChatPDF</PageTitle>

<div class="max-w-4xl mx-auto">
    @if (messages.Count > 1) 
    {
        <div class="flex justify-end mb-4">
            <button class="btn btn-secondary" @onclick="ResetConversationAsync">
                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" style="width: 16px; height: 16px; margin-right: 8px;">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                New Chat
            </button>
        </div>
    }
    <!-- Main Chat Area -->
    <div class="bg-white rounded-2xl shadow-sm border border-gray-200 min-h-[700px] flex flex-col">
        <ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
            <NoMessagesContent>
                <div class="flex-1 flex flex-col items-center justify-center p-8 text-center">
                    @if (availableDocuments.Any())
                    {
                        <div class="max-w-lg space-y-6">
                            <div class="text-center">
                                <h2 class="text-2xl font-bold text-gray-900 mb-3">Ready to chat!</h2>
                                <p class="text-gray-600 mb-6">
                                    You have <span class="font-semibold text-primary-600">@availableDocuments.Count</span> document@(availableDocuments.Count == 1 ? "" : "s") available. 
                                    Ask me anything about your PDFs.
                                </p>
                            </div>
                            
                        </div>
                    }
                    else
                    {
                        <div class="max-w-md space-y-6">
                            <div class="text-center">
                                <h2 class="text-2xl font-bold text-gray-900 mb-3">Welcome to ChatPDF</h2>
                                <p class="text-gray-600 mb-6">Upload PDF documents to start having intelligent conversations with your files.</p>
                            </div>
                        </div>
                    }
                </div>
            </NoMessagesContent>
        </ChatMessageList>

        <!-- Chat Input Area -->
        <div class="border-t border-gray-200 p-4 space-y-4">
            <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
            <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
        </div>
    </div>
</div>

@code {
    private const string SystemPrompt = @"
        You are an assistant who answers questions about information you retrieve.
        Do not answer questions about anything else.
        Use only simple markdown to format your responses.

        Use the search tool to find relevant information. When you do this, end your
        reply with citations in the special XML format:

        <citation filename='string' page_number='number'>exact quote here</citation>

        Always include the citation in your response if there are results.

        The quote must be max 5 words, taken word-for-word from the search result, and is the basis for why the citation is relevant.
        Don't refer to the presence of citations; just emit these tags right at the end, with no surrounding text.
        ";

    private readonly ChatOptions chatOptions = new();
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;
    private List<string> availableDocuments = new();

    protected override void OnInitialized()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatOptions.Tools = [AIFunctionFactory.Create(SearchAsync)];
        LoadAvailableDocuments();
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Show loading indicator immediately
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, "");
        StateHasChanged();

        // Display a new response from the IChatClient, streaming responses
        // aren't supported because Ollama will not support both streaming and using Tools
        currentResponseCancellation = new();
        var response = await ChatClient.GetResponseAsync(messages, chatOptions, currentResponseCancellation.Token);

        // Clear loading indicator and store responses in the conversation
        currentResponseMessage = null;
        messages.AddMessages(response);
        chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    private void ShowNewChatOptions()
    {
        // This could be enhanced to show recent chats or templates in the future
        _ = ResetConversationAsync();
    }

    private void LoadAvailableDocuments()
    {
        availableDocuments = DocumentService.GetAvailableDocuments();
    }

    [Description("Searches for information using a phrase or keyword")]
    private async Task<IEnumerable<string>> SearchAsync(
        [Description("The phrase to search for.")] string searchPhrase,
        [Description("If possible, specify the filename to search that file only. If not provided or empty, the search includes all files.")] string? filenameFilter = null)
    {
        await InvokeAsync(StateHasChanged);
        var results = await Search.SearchAsync(searchPhrase, filenameFilter, maxResults: 5);
        return results.Select(result =>
            $"<result filename=\"{result.DocumentId}\" page_number=\"{result.PageNumber}\">{result.Text}</result>");
    }

    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
